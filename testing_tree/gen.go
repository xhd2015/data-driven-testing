package testing_tree

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func GenerateTestFile[Q any, R any, TestingContext ITestingContext](tt *Case[Q, R, TestingContext], caseName string, file string, pkg string) error {
	code := GenerateTestFileCode(tt, caseName, pkg)
	return os.WriteFile(file, []byte(code), 0755)
}

func GenerateTestFileCode[Q any, R any, TestingContext ITestingContext](tt *Case[Q, R, TestingContext], caseName string, pkg string) string {
	cases := tt.GetAllCases()

	funcs := make([]string, 0, len(cases))
	for _, tt := range cases {
		fn := FormatGoFunc(tt.GetPath(), caseName)
		funcs = append(funcs, fn)
	}

	var imp string
	if len(funcs) > 0 {
		imp = `
import "testing"`
	}

	// file := "mp_unactivated_gen_test.go"
	code := fmt.Sprintf(`// Code generated by gen_test. DO NOT EDIT.

package %s
%s

%s	
`,
		pkg,
		imp,
		strings.Join(funcs, "\n\n"))
	return code
}

func FormatGoFunc(path []string, rootVar string) string {
	names := make([]string, 0, len(path))
	quoteNames := make([]string, 0, len(path))
	for _, name := range path {
		quoteNames = append(quoteNames, strconv.Quote(name))
		if name == "" {
			name = "Unamed"
		}
		names = append(names, name)
	}
	name := JoinAsFuncName(names)

	quoteNameLit := strings.Join(quoteNames, ", ")
	return fmt.Sprintf(`func Test%s(t *testing.T) {
    %s.RunPath(t, []string{%s})
}`,
		name,
		rootVar,
		quoteNameLit,
	)
}

func JoinAsFuncName(names []string) string {
	name := strings.Join(names, "-")
	name = strings.Title(name)
	return strings.ReplaceAll(name, "-", "_")
}
